# -*- coding: utf-8 -*-
"""_MINOR_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16GWt2P8EO2MffzwuffC-cvb_iX4sBGTZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn import feature_extraction, linear_model, model_selection, preprocessing
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline

"""# New Section"""

import pandas as pd

fake = pd.read_csv("/content/drive/MyDrive/Fake.csv")
true = pd.read_csv("/content/drive/MyDrive/True.csv")

from google.colab import drive
drive.mount('/content/drive')

fake.shape

true.shape

fake['target'] = 'fake'
true['target'] = 'true'

data = pd.concat([fake, true]).reset_index(drop = True)
data.shape

from sklearn.utils import shuffle
data = shuffle(data)
data = data.reset_index(drop=True)

data.head()

data.drop(["date"],axis=1,inplace=True)
data.head()

data.drop(["title"],axis=1,inplace=True)
data.head()

data['text'] = data['text'].apply(lambda x: x.lower())
data.head()

import string

def punctuation_removal(text):
    all_list = [char for char in text if char not in string.punctuation]
    clean_str = ''.join(all_list)
    return clean_str

data['text'] = data['text'].apply(punctuation_removal)

data.head()

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop = stopwords.words('english')

data['text'] = data['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))

data.head()

print(data.groupby(['subject'])['text'].count())
data.groupby(['subject'])['text'].count().plot(kind="bar")
plt.show()

print(data.groupby(['target'])['text'].count())
data.groupby(['target'])['text'].count().plot(kind="bar")
plt.show()

from wordcloud import WordCloud

fake_data = data[data["target"] == "fake"]
all_words = ' '.join([text for text in fake_data.text])

wordcloud = WordCloud(width= 800, height= 500,
                          max_font_size = 110,
                          collocations = False).generate(all_words)

plt.figure(figsize=(10,7))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

from wordcloud import WordCloud

real_data = data[data["target"] == "true"]
all_words = ' '.join([text for text in fake_data.text])

wordcloud = WordCloud(width= 800, height= 500,
                          max_font_size = 110,
                          collocations = False).generate(all_words)

plt.figure(figsize=(10,7))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

from nltk import tokenize

token_space = tokenize.WhitespaceTokenizer()

def counter(text, column_text, quantity):
    all_words = ' '.join([text for text in text[column_text]])
    token_phrase = token_space.tokenize(all_words)
    frequency = nltk.FreqDist(token_phrase)
    df_frequency = pd.DataFrame({"Word": list(frequency.keys()),
                                   "Frequency": list(frequency.values())})
    df_frequency = df_frequency.nlargest(columns = "Frequency", n = quantity)
    plt.figure(figsize=(12,8))
    ax = sns.barplot(data = df_frequency, x = "Word", y = "Frequency", color = 'blue')
    ax.set(ylabel = "Count")
    plt.xticks(rotation='vertical')
    plt.show()

counter(data[data["target"] == "fake"], "text", 20)

counter(data[data["target"] == "true"], "text", 20)

from sklearn import metrics
import itertools

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

accuracy_dict = {}
f1_score_dict={}

X_train,X_test,y_train,y_test = train_test_split(data['text'], data.target, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression

pipe = Pipeline([('vect', CountVectorizer()),
                 ('tfidf', TfidfTransformer()),
                 ('model', LogisticRegression())])

# Fitting the model
model = pipe.fit(X_train, y_train)
prediction = model.predict(X_test)
accuracy = accuracy_score(y_test, prediction)
precision = precision_score(y_test, prediction, pos_label='fake')
recall = recall_score(y_test, prediction, pos_label='fake')
f1 = f1_score(y_test, prediction, pos_label='fake')
accuracy_dict['Logistic Regression'] = accuracy
f1_score_dict['Logistic Regression'] = f1
print("accuracy: {}%".format(round(accuracy*100,2)))
print("precision: {}%".format(round(precision*100,2)))
print("recall: {}%".format(round(recall*100,2)))
print("f1 score: {}%".format(round(f1*100,2)))

model1 = model

cm = metrics.confusion_matrix(y_test, prediction)
plot_confusion_matrix(cm, classes=['Fake', 'Real'])

# @title Default title text
from sklearn.tree import DecisionTreeClassifier

pipe = Pipeline([('vect', CountVectorizer()),
                 ('tfidf', TfidfTransformer()),
                 ('model', DecisionTreeClassifier(criterion= 'entropy',
                                           max_depth = 20,
                                           splitter='best',
                                           random_state=42))])
# Fitting the model
model = pipe.fit(X_train, y_train)
prediction = model.predict(X_test)
accuracy = accuracy_score(y_test, prediction)
precision = precision_score(y_test, prediction, pos_label='fake')
recall = recall_score(y_test, prediction, pos_label='fake')
f1 = f1_score(y_test, prediction, pos_label='fake')
accuracy_dict['Decision Tree'] = accuracy
f1_score_dict['Decision Tree'] = f1
print("accuracy: {}%".format(round(accuracy*100,2)))
print("precision: {}%".format(round(precision*100,2)))
print("recall: {}%".format(round(recall*100,2)))
print("f1 score: {}%".format(round(f1*100,2)))

model2 = model

cm = metrics.confusion_matrix(y_test, prediction)
plot_confusion_matrix(cm, classes=['Fake', 'Real'])

from sklearn.ensemble import RandomForestClassifier

pipe = Pipeline([('vect', CountVectorizer()),
                 ('tfidf', TfidfTransformer()),
                 ('model', RandomForestClassifier(n_estimators=50, criterion="entropy"))])

model = pipe.fit(X_train, y_train)
prediction = model.predict(X_test)
accuracy = accuracy_score(y_test, prediction)
precision = precision_score(y_test, prediction, pos_label='fake')
recall = recall_score(y_test, prediction, pos_label='fake')
f1 = f1_score(y_test, prediction, pos_label='fake')
accuracy_dict['Random Forest'] = accuracy
f1_score_dict['Random Forest'] = f1
print("accuracy: {}%".format(round(accuracy*100,2)))
print("precision: {}%".format(round(precision*100,2)))
print("recall: {}%".format(round(recall*100,2)))
print("f1 score: {}%".format(round(f1*100,2)))

model3 = model

cm = metrics.confusion_matrix(y_test, prediction)
plot_confusion_matrix(cm, classes=['Fake', 'Real'])

import pickle
# Save the model to a file
with open('fake_news_detector.pkl', 'wb') as file:
    pickle.dump(model1, file)

# Load the saved model from the file
with open('fake_news_detector.pkl', 'rb') as file:
    loaded_model = pickle.load(file)

print("Accuracy of all models combined:")
for key, value in accuracy_dict.items():
    print(key + ": " + str(round(value * 100, 2)) + "%")

print("F1 Score of all models combined:")
for key, value in f1_score_dict.items():
    print(key + ": " + str(round(value * 100, 2)) + "%")

import matplotlib.pyplot as plt

# Calculate the combined F1 score as the average of all model F1 scores
combined_f1_score = sum(f1_score_dict.values()) / len(f1_score_dict)
f1_score_dict['Combined'] = combined_f1_score

# Create a bar plot for model accuracies including the combined accuracy
plt.figure(figsize=(10, 5))
plt.bar(accuracy_dict.keys(), accuracy_dict.values(), color='skyblue')
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Model Accuracies with Combined Accuracy')
plt.ylim(0, 1)
for index, value in enumerate(accuracy_dict.values()):
    plt.text(index, value, f'{round(value*100, 2)}%', ha='center')
plt.show()

# Create a bar plot for model F1 scores including the combined F1 score
plt.figure(figsize=(10, 5))
plt.bar(f1_score_dict.keys(), f1_score_dict.values(), color='lightgreen')
plt.xlabel('Models')
plt.ylabel('F1 Score')
plt.title('Model F1 Scores with Combined F1 Score')
plt.ylim(0, 1)
for index, value in enumerate(f1_score_dict.values()):
    plt.text(index, value, f'{round(value*100, 2)}%', ha='center')
plt.show()

import joblib
import string
from nltk.corpus import stopwords
import nltk

# Load stopwords and punctuation removal function
nltk.download('stopwords')
stop = stopwords.words('english')

def punctuation_removal(text):
    all_list = [char for char in text if char not in string.punctuation]
    clean_str = ''.join(all_list)
    return clean_str

# Load the pre-trained model
model = joblib.load('fake_news_detector.pkl')

# Function to predict if the news is fake or true
def predict_news_headline(headline):
    headline = headline.lower()  # Convert to lower case
    headline = punctuation_removal(headline)  # Remove punctuation
    headline = ' '.join([word for word in headline.split() if word not in stop])  # Remove stop words

    prediction = model.predict([headline])[0]  # Predict using the model
    return prediction

# Test the function with a sample input
headline = "Scientists Confirm: Eating Chocolate Every Day Leads to Weight Loss!"
prediction = predict_news_headline(headline)
print(f'The headline is: {prediction}')